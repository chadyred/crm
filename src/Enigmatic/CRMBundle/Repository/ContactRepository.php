<?php

namespace Enigmatic\CRMBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ContactRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContactRepository extends EntityRepository
{
    public function getList($page = 0, $listPageLimit = null, $params = array()) {

        $qb = $this->createQueryBuilder('contact');

        $qb = $this->join($qb, true);
        if (isset($params['search']))
            $qb = $this->search($qb, $params['search']);
        if (isset($params['order']))
            $qb = $this->order($qb, $params['order']);

        $qb ->getQuery();

        if ($listPageLimit) {
            $qb ->setFirstResult($page * $listPageLimit)
                ->setMaxResults($listPageLimit);
        }

        return new Paginator($qb);
    }

    public function find($id) {

        $qb = $this->createQueryBuilder('contact');
        $qb = $this->join($qb, true);
        $qb ->where('contact = :id')
            ->setParameter('id', $id);

        return $qb->getQuery()->getOneOrNullResult();
    }

    protected function join(QueryBuilder $qb, $add = false)
    {
        $qb->leftjoin('contact.phones', 'phones');
        $qb->leftjoin('contact.account', 'account');
        $qb->leftjoin('contact.agencies', 'agencies');

        if ($add) {
            $qb->addSelect('phones');
            $qb->addSelect('account');
            $qb->addSelect('agencies');
        }

        return $qb;
    }

    protected function search(QueryBuilder $qb, $searchs)
    {
        if (is_array($searchs)) {
            foreach ($searchs as $field => $value) {
                if ($value) {
                    switch ($field) {
                        case 'id':
                            $qb ->andWhere('contact.id = :search_id');
                            $qb ->setParameter('search_id', $value);
                            break;
                        case 'name':
                            $qb ->andWhere('contact.name LIKE :search_name OR contact.firstname LIKE :search_name');
                            $qb ->setParameter('search_name', '%'.$value.'%');
                            break;
                        case 'email':
                            $qb ->andWhere('contact.email LIKE :search_email');
                            $qb ->setParameter('search_email', '%'.$value.'%');
                            break;
                        case 'function':
                            $qb ->andWhere('contact.function LIKE :search_function');
                            $qb ->setParameter('search_function', '%'.$value.'%');
                            break;
                        case 'phones':
                            $qb ->andWhere('phones.phone LIKE :search_phones');
                            $qb ->setParameter('search_phones', '%'.$value.'%');
                            break;
                        case 'account_name':
                            $qb ->andWhere('account.name LIKE :search_account_name');
                            $qb ->setParameter('search_account_name', '%'.$value.'%');
                            break;
                        case 'agency':
                            $qb ->andWhere('agencies = :search_agency');
                            $qb ->setParameter('search_agency', $value);
                            break;
                        case 'account_owner':
                            $qb->leftjoin('account.owners', 'owners');
                            $qb ->andWhere('owners.user = :search_owner');
                            $qb ->setParameter('search_owner', $value);
                            break;
                    }
                }
            }
        }

        return $qb;
    }

    protected function order(QueryBuilder $qb, $orders = null)
    {
        if (is_array($orders)) {
            foreach ($orders as $field => $direction) {
                if ($direction != 'ASC')
                    $direction = 'DESC';
                switch ($field) {
                    case 'id':
                        $qb ->addOrderBy('contact.id', $direction);
                        break;
                    case 'name':
                        $qb ->addOrderBy('contact.firstname', $direction);
                        $qb ->addOrderBy('contact.name', $direction);
                        break;
                    case 'email':
                        $qb ->addOrderBy('contact.email', $direction);
                        break;
                    case 'function':
                        $qb ->addOrderBy('contact.function', $direction);
                        break;
                    case 'account_name':
                        $qb ->addOrderBy('account.name', $direction);
                        break;
                }
            }
        }

        return $qb;
    }

}
