<?php

namespace Enigmatic\CRMBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use UserBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function getList($page = 0, $listPageLimit = null, $params = array(), $enabled = true) {

        $qb = $this->createQueryBuilder('user');

        $qb = $this->join($qb, true);
        if (isset($params['search']))
            $qb = $this->search($qb, $params['search']);
        if (isset($params['order']))
            $qb = $this->order($qb, $params['order']);
        $qb = $this->enabled($qb, $enabled);

        $qb ->getQuery();

        if ($listPageLimit) {
            $qb ->setFirstResult($page * $listPageLimit)
                ->setMaxResults($listPageLimit);
        }

        return new Paginator($qb);
    }

    public function find($id) {

        $qb = $this->createQueryBuilder('user');
        $qb = $this->join($qb, true);
        $qb ->where('user = :id')
            ->setParameter('id', $id);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function findOneByUser(User $user) {

        $qb = $this->createQueryBuilder('user');
        $qb = $this->join($qb, true);
        $qb ->where('securityUser = :user')
            ->setParameter('user', $user);

        return $qb->getQuery()->getOneOrNullResult();
    }

    protected function join(QueryBuilder $qb, $add = false)
    {
        $qb->innerjoin('user.user', 'securityUser');
        $qb->leftjoin('user.activities', 'activities');
        $qb->leftjoin('user.assignedAccount', 'assignedAccount');
        $qb->leftjoin('user.agencies', 'agencies');
        $qb->leftjoin('agencies.agency', 'agency');

        if ($add) {
            $qb->addSelect('securityUser');
            $qb->addSelect('assignedAccount');
            $qb->addSelect('agencies');
            $qb->addSelect('agency');
        }

        return $qb;
    }

    protected function search(QueryBuilder $qb, $searchs)
    {
        if (is_array($searchs)) {
            foreach ($searchs as $field => $value) {
                if ($value) {
                    switch ($field) {
                        case 'id':
                            $qb ->andWhere('user.id = :search_id');
                            $qb ->setParameter('search_id', $value);
                            break;
                        case 'name':
                            $qb ->andWhere('user.name LIKE :search_name');
                            $qb ->setParameter('search_name', '%'.$value.'%');
                            break;
                        case 'email':
                            $qb ->andWhere('securityUser.email LIKE :search_email');
                            $qb ->setParameter('search_email', '%'.$value.'%');
                            break;
                        case 'agency_name':
                            $qb ->andWhere('agency.name = :search_agency_name');
                            $qb ->setParameter('search_agency_name', '%'.$value.'%');
                            break;
                    }
                }
            }
        }

        return $qb;
    }

    protected function order(QueryBuilder $qb, $orders = null)
    {
        if (is_array($orders)) {
            foreach ($orders as $field => $direction) {
                if ($direction != 'ASC')
                    $direction = 'DESC';
                switch ($field) {
                    case 'id':
                        $qb ->addOrderBy('user.id', $direction);
                        break;
                    case 'name':
                        $qb ->addOrderBy('user.name', $direction);
                        break;
                    case 'email':
                        $qb ->addOrderBy('securityUser.email', $direction);
                        break;
                    case 'agency':
                        $qb ->addOrderBy('user.name', $direction);
                        break;
                    case 'locked':
                        $qb ->addOrderBy('securityUser.locked', $direction);
                        break;
                    case 'lastLogin':
                        $qb ->addOrderBy('securityUser.lastLogin', $direction);
                        break;
                }
            }
        }

        return $qb;
    }

    protected function enabled(QueryBuilder $qb, $enabled = true)
    {
        $qb ->andwhere('securityUser.enabled = :enabled')
            ->setParameter('enabled', $enabled);

        return $qb;
    }
}
