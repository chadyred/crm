<?php

namespace Enigmatic\CRMBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CampaignFaxingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CampaignFaxingRepository extends EntityRepository
{
    public function getList($page = 0, $listPageLimit = null, $params = array()) {

        $qb = $this->createQueryBuilder('campaign');

        $qb = $this->join($qb, true);
        if (isset($params['search']))
            $qb = $this->search($qb, $params['search']);
        if (isset($params['order']))
            $qb = $this->order($qb, $params['order']);

        $qb ->getQuery();

        if ($listPageLimit) {
            $qb ->setFirstResult($page * $listPageLimit)
                ->setMaxResults($listPageLimit);
        }

        return new Paginator($qb);
    }

    public function find($id) {

        $qb = $this->createQueryBuilder('campaign');
        $qb = $this->join($qb, true);
        $qb ->where('campaign = :id')
            ->setParameter('id', $id);

        return $qb->getQuery()->getOneOrNullResult();
    }

    protected function join(QueryBuilder $qb, $add = false)
    {
        $qb->leftjoin('campaign.owner', 'owner');
        $qb->leftjoin('campaign.contacts', 'contacts');

        if ($add) {
            $qb->addSelect('owner');
            $qb->addSelect('contacts');
        }

        return $qb;
    }

    protected function search(QueryBuilder $qb, $searchs)
    {
        if (is_array($searchs)) {
            foreach ($searchs as $field => $value) {
                if ($value) {
                    switch ($field) {
                        case 'id':
                            $qb ->andWhere('campaign.id = :search_id');
                            $qb ->setParameter('search_id', $value);
                            break;
                        case 'name':
                            $qb ->andWhere('campaign.name LIKE :search_name');
                            $qb ->setParameter('search_name', '%'.$value.'%');
                            break;
                        case 'state':
                            $qb ->andWhere('campaign.state = :search_state');
                            $qb ->setParameter('search_state', $value);
                            break;
                        case 'dateSended':
                            $value = \DateTime::createFromFormat('d-m-Y H:i:s', $value.':00');
                            $qb ->andWhere('campaign.dateSended >= :search_date_sended');
                            $qb ->setParameter('search_date_sended', $value);
                            break;
                        case 'dateSendedEnd':
                            $value = \DateTime::createFromFormat('d-m-Y H:i:s', $value.':00');
                            $qb ->andWhere('campaign.dateSended < :search_date_sended_end');
                            $qb ->setParameter('search_date_sended_end', $value);
                            break;
                        case 'owner':
                            $qb ->andWhere('owner.firstname LIKE :search_owner OR owner.name LIKE :search_owner');
                            $qb ->setParameter('search_owner', '%'.$value.'%');
                            break;
                        case 'agency':
                            $qb ->leftjoin('owner.agencies', 'owner_agencies');
                            $qb ->addSelect('owner_agencies');
                            $qb ->leftjoin('owner_agencies.end', 'owner_agencies_end');
                            $qb ->addSelect('owner_agencies_end');
                            $qb ->andWhere('owner_agencies.agency = :search_agency');
                            $qb ->andWhere('owner_agencies.dateCreated <= campaign.dateCreated');
                            $qb ->andWhere('owner_agencies_end IS NULL OR owner_agencies_end.dateEnd > campaign.dateCreated');
                            $qb ->setParameter('search_agency', $value);
                            break;
                        case 'createdBy':
                            $qb ->leftjoin('owner.agencies', 'owner_agencies');
                            $qb ->addSelect('owner_agencies');
                            $qb ->leftjoin('owner_agencies.end', 'owner_agencies_end');
                            $qb ->addSelect('owner_agencies_end');
                            $qb ->andWhere('owner_agencies.agency = :search_agency');
                            $qb ->andWhere('owner_agencies.dateCreated <= campaign.dateCreated');
                            $qb ->andWhere('owner_agencies_end IS NULL OR owner_agencies_end.dateEnd > campaign.dateCreated');
                            $qb ->setParameter('search_agency', $value);
                            $qb ->andWhere('owner_agencies_end IS NULL');
                            $qb ->andWhere('owner = :search_owner');
                            $qb ->setParameter('search_owner', $value);
                            break;
                    }
                }
            }
        }

        return $qb;
    }

    protected function order(QueryBuilder $qb, $orders = null)
    {
        if (is_array($orders)) {
            foreach ($orders as $field => $direction) {
                if ($direction != 'ASC')
                    $direction = 'DESC';
                switch ($field) {
                    case 'id':
                        $qb ->addOrderBy('campaign.id', $direction);
                        break;
                    case 'name':
                        $qb ->addOrderBy('campaign.name', $direction);
                        break;
                }
            }
        }

        return $qb;
    }
}
